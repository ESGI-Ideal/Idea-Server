openapi: 3.0.0
servers: []
info:
  description: >-
    For this sample, you can use the api key `special-key` to test the
    authorization filters.
  version: 1.0.0
  title: Swagger Petstore
  termsOfService: 'https://esgi-ideal.github.io/terms/'
  contact:
    email: todo@reseau-ges.fr
    name: IDeal Shop Support
    url: 'https://esgi-ideal.github.io/support/'
  license:
    name: CC BY-SA 4.0
    url: 'https://creativecommons.org/licenses/by/4.0/'
tags:
  - name: article
    description: Everything about your articles
    externalDocs:
      description: Find out more
      url: 'http://todo/doc'
  - name: user
    description: Operations about user
  - name: partner
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our partners
      url: 'http://doc/todo'
  - name: ads
  - name: image
paths:
  /:
    get:
      summary: 'informations de base (statut, version ...)'
      description: ''
      operationId: apiInfos
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /search:
    get:
      summary: search in articles
      description: Search article by keyword(s)
      operationId: doSearch
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          allowReserved: true
          description: keyword(s) to search
        - in: query
          name: offset
          schema:
            type: integer
          description: >-
            The number of items to skip before starting to collect the result
            set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: orderby
          schema:
            type: string
            enum:
              - price
              - date
          description: Ordering result by criteria
        - in: query
          name: order
          schema:
            type: string
            enum:
              - asc
              - desc
          description: Ordering result
      responses:
        '200':
          description: Default response
          content:
            application/json:
              schema:
                type: object
                properties:
                  keywords:
                    type: string
                  limit:
                    type: integer
                  offset:
                    type: integer
                  totalResult:
                    type: integer
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                    uniqueItems: true
      tags:
        - article
  /oauth2/token:
    post:
      summary: OAuth2 authnetication end-point
      operationId: oauth2Token
      requestBody:
        description: OAuth information for request
        required: true
        content:
          '*/*':
            schema:
              type: object
              required:
                - grant_type
                - username
                - password
                - client_id
                - client_secret
                - scope
              properties:
                grant_type:
                  type: string
                  enum:
                    - password
                username:
                  type: string
                password:
                  type: string
                  format: password
                client_id:
                  type: string
                client_secret:
                  type: string
                  format: password
                scope:
                  type: array
                  items:
                    type: string
      responses:
        '400':
          description: Access token error
          content:
            application/json: {}
        default:
          description: ''
          content:
            application/json: {}
  /ad:
    get:
      summary: ads list
      description: Return all ads from the system
      operationId: getAds
      responses:
        '200':
          description: A list of ads
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
                uniqueItems: true
      tags:
        - ads
    post:
      summary: Add new ad
      description: ''
      operationId: newAd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/AdContent'
      responses:
        '200':
          description: Created
        '201':
          description: Create
      tags:
        - ads
      security:
        - OAuth2:
            - admin
  '/ad/{id}':
    get:
      summary: informations on an ad
      description: ''
      operationId: getAd
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Datas on the ad
          content:
            application/json:
              schema:
                type: integer
        default:
          description: Ad's ID not exist
      tags:
        - ads
    delete:
      description: ''
      operationId: deleteAd
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Delete complete
          content:
            application/json:
              schema:
                type: integer
        default:
          description: Ad's ID not exist
      tags:
        - ads
      security:
        - OAuth2:
            - admin
  /article:
    get:
      summary: articles list
      description: Return all articles from the system
      operationId: getArticles
      responses:
        '200':
          description: A list of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
                uniqueItems: true
      tags:
        - article
    post:
      summary: Add new Article
      description: ''
      operationId: newArticle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArticleContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/ArticleContent'
      responses:
        '201':
          description: Create
      tags:
        - article
      security:
        - OAuth2:
            - user
  '/article/{id}':
    get:
      summary: informations on an article
      description: ''
      operationId: getArticle
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Datas on the article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        default:
          description: Article's ID not exist
      tags:
        - article
    delete:
      description: ''
      operationId: deleteArticle
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Delete completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        default:
          description: Article's ID not exist
      tags:
        - article
      security:
        - OAuth2:
            - user
  '/article/{id}/like':
    post:
      description: Vote of a user on an article
      operationId: articleVote
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        description: 'True if user like-it, False if not'
        required: true
        content:
          application/json:
            schema:
              type: boolean
      responses:
        '200':
          description: Datas on the article
        default:
          description: Article's ID not exist
      tags:
        - article
      security:
        - OAuth2:
            - user
    delete:
      description: Remove the vote of a user on an article
      operationId: articleUnvote
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Vote deleted
        default:
          description: Article's ID not exist
      tags:
        - article
      security:
        - OAuth2:
            - user
  /image:
    get:
      summary: Liste les images disponibles
      description: ''
      operationId: getImages
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
                uniqueItems: true
      tags:
        - image
    post:
      summary: Upload une nouvelle image
      description: ''
      operationId: newImage
      requestBody:
        description: Image's data
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        '201':
          description: Create
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
      tags:
        - image
      security:
        - OAuth2:
            - user
  '/image/{id}':
    parameters:
      - $ref: '#/components/parameters/id'
    get:
      summary: Metadata d.une image
      description: ''
      operationId: getImageMetadata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageMetas'
        '404':
          description: Not found
      tags:
        - image
    delete:
      summary: Supprime une image
      description: ''
      operationId: deleteImage
      responses:
        '200':
          description: OK
      tags:
        - image
      security:
        - OAuth2:
            - user
  '/image/{id}/file':
    get:
      summary: Récupère l'image (données binaires)
      description: ''
      operationId: getImageFile
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
      tags:
        - image
  '/image/{id}/thumb':
    get:
      summary: Génère une miniature de l'image (données binaires)
      description: ''
      operationId: getImageThumb
      parameters:
        - $ref: '#/components/parameters/id'
        - in: query
          name: size
          schema:
            type: integer
            minimum: 1
            default: 150
          required: false
          description: The numbers of items to return
      responses:
        '200':
          description: OK
          content:
            image/jpg:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
  /partner:
    get:
      summary: partners list
      description: Return all partners from the system
      operationId: getPartners
      responses:
        '200':
          description: A list of partner
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partner'
                uniqueItems: true
      tags:
        - partner
    post:
      summary: Add new partner
      description: ''
      operationId: newPartner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartnerContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/PartnerContent'
      responses:
        '201':
          description: Create
      tags:
        - partner
      security:
        - OAuth2:
            - admin
  '/partner/{id}':
    get:
      summary: informations on an partner
      description: ''
      operationId: getPartner
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Datas on the partner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
        default:
          description: Partner's ID not exist
      tags:
        - partner
    delete:
      description: ''
      operationId: deletePartner
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Delete complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
        default:
          description: Partner's ID not exist
      tags:
        - partner
      security:
        - OAuth2:
            - admin
  /user:
    get:
      summary: users list
      description: Return all users from the system
      operationId: getUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                uniqueItems: true
      tags:
        - user
    post:
      summary: Add new user
      description: ''
      operationId: newUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserContent'
      responses:
        '201':
          description: Create
      tags:
        - user
  '/user/{id}':
    get:
      summary: informations on an user
      description: ''
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Datas on the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: User's ID not exist
      tags:
        - user
      security:
        - OAuth2:
            - user
    delete:
      description: ''
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Delete complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: User's ID not exist
      tags:
        - user
      security:
        - OAuth2:
            - admin
  '/user/{id}/sells':
    get:
      summary: articles selling by an user
      description: ''
      operationId: getUserArticlesCreate
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: List of articles' ID
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
                uniqueItems: true
        default:
          description: User's ID not exist
      tags:
        - user
      security:
        - OAuth2:
            - user
  /user/me:
    get:
      summary: informations on current user
      operationId: getCurrentUser
      security:
        - OAuth2:
            - user
            - admin
      responses:
        '200':
          description: user's data summary
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      favorites:
                        type: integer
                        format: int32
                    additionalProperties: true
        default:
          description: ''
      tags:
        - user
  /user/me/favs:
    get:
      summary: articles in favorite
      operationId: getCurrentUserFavorites
      security:
        - OAuth2:
            - user
      responses:
        '200':
          description: articles in favorites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
                uniqueItems: true
        default:
          description: ''
      tags:
        - user
  '/user/me/favs/{id}':
    put:
      summary: mark an article in favorite
      operationId: addArticleCurrentUserFavorites
      parameters:
        - $ref: '#/components/parameters/id'
      security:
        - OAuth2:
            - user
      responses:
        '201':
          description: article add in favorites
        default:
          description: ''
      tags:
        - user
    delete:
      summary: remove an article from favorites
      operationId: deleteArticleCurrentUserFavorites
      parameters:
        - $ref: '#/components/parameters/id'
      security:
        - OAuth2:
            - user
      responses:
        '204':
          description: article remove from favorites
        default:
          description: ''
      tags:
        - user
externalDocs:
  description: See API example
  url: 'https://esgi-ideal.github.io/'
components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    ObjId:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
    Ad:
      allOf:
        - $ref: '#/components/schemas/ObjId'
        - $ref: '#/components/schemas/AdContent'
      xml:
        name: Ad
    AdContent:
      type: object
      properties:
        description:
          type: string
          description: Short tip about the ad
        img:
          type: integer
          format: int64
          nullable: true
      xml:
        name: AdData
    Article:
      allOf:
        - $ref: '#/components/schemas/ObjId'
        - $ref: '#/components/schemas/ArticleContent'
      xml:
        name: Article
    ArticleContent:
      type: object
      properties:
        name:
          type: string
        img:
          type: integer
          format: int64
          nullable: true
        createdBy:
          type: integer
          format: int64
          readOnly: true
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        description:
          type: string
        price:
          type: number
          format: float
        customerRating:
          type: number
          format: float
          readOnly: true
          minimum: 0
          maximum: 1
        customerRatingPositive:
          type: integer
          format: int32
          readOnly: true
          minimum: 0
        customerRatingNegative:
          type: integer
          format: int32
          readOnly: true
          minimum: 0
      xml:
        name: ArticleData
    Image:
      description: Information about an image
      allOf:
        - $ref: '#/components/schemas/ObjId'
        - $ref: '#/components/schemas/ImageMetas'
      xml:
        name: Image
    ImageMetas:
      type: object
      description: Short metas/infos about image (for use in others paths or schemas)
      properties:
        height:
          type: integer
          format: int32
          minimum: 0
        width:
          type: integer
          format: int32
          minimum: 0
      xml:
        name: ImageMeta
    Partner:
      allOf:
        - $ref: '#/components/schemas/ObjId'
        - $ref: '#/components/schemas/PartnerContent'
      xml:
        name: Partner
    PartnerContent:
      type: object
      properties:
        name:
          type: string
        img:
          type: integer
          format: int64
          nullable: true
        description:
          type: string
      xml:
        name: PartnerData
    User:
      allOf:
        - $ref: '#/components/schemas/ObjId'
        - $ref: '#/components/schemas/UserContent'
      xml:
        name: User
    UserContent:
      type: object
      properties:
        img:
          type: integer
          format: int64
          nullable: true
        email:
          type: string
        isAdmin:
          type: boolean
      xml:
        name: UserData
  responses:
    '204':
      description: Entity deleted
      content:
        application/json: {}
        application/xml: {}
    '304':
      description: Entity not modified
      content:
        application/json: {}
        application/xml: {}
    '400':
      description: Illegal input for operation
      content:
        application/json: {}
        application/xml: {}
    '401':
      description: Authentication required for access this resource
      content:
        application/json: {}
        application/xml: {}
    '403':
      description: Privileges access refused
      content:
        application/json: {}
        application/xml: {}
    '404':
      description: Entity not found
      content:
        application/json: {}
        application/xml: {}
    '406':
      description: Illegal input for operation
      content:
        application/json: {}
        application/xml: {}
    '409':
      description: Entity conflicts with operation
      content:
        application/json: {}
        application/xml: {}
  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
      description: The object ID
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /oauth2/token
          refreshUrl: /oauth2/refresh
          scopes:
            user: Access to connected user
            admin: Access to administrators
  links: {}
  callbacks: {}
security:
  - OAuth2: []
