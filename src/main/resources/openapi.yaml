openapi: 3.0.0
servers: []
  #- url: 'http://api.ideal.com/'
  #  description: Ideal data API
  #  variables: {}
info:
  description: >-
    Contrat de l'API du projet ESGI-Ideal.
    Exposé avec Vert.X et consommé par un site web et une application mobile.
  version: 1.5.1
  title: Ideal OpenAPI
  termsOfService: 'https://esgi-ideal.github.io/terms/'
  contact:
    email: todo@reseau-ges.fr
    name: IDeal Shop Support
    url: 'https://esgi-ideal.github.io/support/'
  license:
    name: Unknow
    url: 'https://esgi-ideal.github.io/license/'
tags:
  - name: article
    description: Everything about your articles
    externalDocs:
      description: Find out more
      url: 'http://todo/doc'
  - name: user
    description: Operations about user
  - name: partner
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our partners
      url: 'http://doc/todo'
  - name: ads
  - name: image
paths:
  /:
    get:
      summary: 'informations de base (statut, version ...)'
      description: ''
      operationId: apiInfos
      responses:
        200:
          description: 'OK'
          content:
            application/json:
                schema:
                  type: object
                  additionalProperties: true
  /search:
    get:
      summary: search in articles
      description: 'Search article by keyword(s)'
      operationId: doSearch
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
          allowReserved: true
          description: keyword(s) to search
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the result set
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
        - in: query
          name: orderby
          schema:
            type: string
            enum: ["price", "date"]
          description: Ordering result by criteria
        - in: query
          name: order
          schema:
            type: string
            enum: ["asc", "desc"]
          description: Ordering result
      responses:
        200:
          description: Default response
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    keywords:
                      type: string
                    limit:
                      type: integer
                    offset:
                      type: integer
                    totalResult:
                      type: integer
                    result:
                      type: array
                      items:
                        $ref: '#/components/schemas/Article'
                      uniqueItems: true
                    #orderBy:
                    #  type: string
                    #  optional: true
      tags:
        - article
  /oauth2/token:
    post:
      summary: OAuth2 authnetication end-point
      operationId: oauth2Token
      #parameters: !!!
      requestBody:
        description: 'OAuth information for request'
        required: true
        content:
          #application/x-www-form-urlencoded
          '*/*':
            schema:
              type: object
              required:
                - grant_type
                - username
                - password
                - client_id
                - client_secret
                - scope
              properties:
                grant_type:
                    type: string
                    enum: [password]
                username:
                    type: string
                    #format: email
                password:
                    type: string
                    format: password
                client_id:
                    type: string
                client_secret:
                    type: string
                    format: password
                scope:
                    type: array
                    items:
                        type: string
                        enum: [user, admin]
      responses:
        '400':
            description: 'Access token error'
            content:
                application/json: {}
        default:
          description: ''
          content:
            application/json: {}
externalDocs:
  description: See API example
  url: 'https://esgi-ideal.github.io/'
components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    ObjId:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          #exclusiveMinimim: false
          readOnly: true

  responses:
    #'202':
    #    description: 'OK'
    #'201':
    #    description: 'Entity created'
    '204':
        description: 'Entity deleted'
        content:
            application/json: {}
            application/xml: {}
    '304':
        description: 'Entity not modified'
        content:
            application/json: {}
            application/xml: {}
    '400':
        description: 'Illegal input for operation'
        content:
            application/json: {}
            application/xml: {}
    '406':
        description: 'Illegal input for operation'
        content:
            application/json: {}
            application/xml: {}
    '404':
        description: 'Entity not found' #Bad request
        content:
            application/json: {}
            application/xml: {}
    '401':
        description: 'Authentication required for access this resource'
        content:
            application/json: {}
            application/xml: {}
    '403':
        description: 'Privileges access refused'
        content:
            application/json: {}
            application/xml: {}
    '409':
        description: 'Entity conflicts with operation'
        content:
            application/json: {}
            application/xml: {}
  parameters:
    id:
        name: id
        in: path
        required: true
        schema:
            type: integer
            format: int64
            #minimum: 0
        description: The object ID
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    OAuth2:
        type: oauth2
        flows:
            password:
                tokenUrl: "/oauth2/token"
                refreshUrl: "/oauth2/refresh"
                scopes:
                    user: Access to connected user
                    admin: Access to administrators
  links: {}
  callbacks: {}
security:
    - OAuth2: []
