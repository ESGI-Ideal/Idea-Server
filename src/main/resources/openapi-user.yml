paths:
  /user:
    get:
      summary: users list
      description: Return all users from the system
      operationId: getUsers
      responses:
        '200':
          description: A list of users
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
                  uniqueItems: true
      tags:
        - user
    #put:
    #  #TODO
    post:
      summary: Add new user
      description: ''
      operationId: newUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserContent'
      responses:
        '201':
          description: 'Create'
      tags:
        - user
  /user/me:
    get:
      summary: informations on current user
      operationId: getCurrentUser
      security:
        - OAuth2:
            - user
            #- admin
      responses:
        '200':
          description: user's data summary
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      favorites:
                        type: integer
                        format: int32
                    additionalProperties: true  #this endpoint isn't yet stable
        default:
          description: ''
      tags:
        - user
  /user/me/favs:
    get:
      summary: articles in favorite
      operationId: getCurrentUserFavorites
      security:
        - OAuth2:
            - user
      responses:
        200:
          description: articles in favorites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
                uniqueItems: true
        default:
          description: ''
      tags:
        - user
  /user/me/favs/{id}:
    put:
      summary: mark an article in favorite
      operationId: addArticleCurrentUserFavorites
      parameters:
        - $ref: '#/components/parameters/id'
      security:
        - OAuth2:
          - user
      responses:
        201:
          description: article add in favorites
        default:
          description: ''
      tags:
        - user
    delete:
      summary: remove an article from favorites
      operationId: deleteArticleCurrentUserFavorites
      parameters:
        - $ref: '#/components/parameters/id'
      security:
        - OAuth2:
          - user
      responses:
        204:
          description: article remove from favorites
        default:
          description: ''
      tags:
        - user
  /user/{id}:
    get:
      summary: informations on an user
      description: ''
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Datas on the user
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/User'
        default:
          description: User's ID not exist
      tags:
        - user
      security:
        - OAuth2:
            - user
    #patch:
    #  #TODO
    delete:
      description: ''
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '204':
          description: Delete complete
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/User'
        default:
          description: User's ID not exist
      tags:
        - user
      security:
        - OAuth2:
            - admin
  /user/{id}/sells:
    get:
      summary: articles selling by an user
      description: ''
      operationId: getUserArticlesCreate
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: List of articles' ID
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int64
                uniqueItems: true
        default:
          description: User's ID not exist
      tags:
        - user
      security:
        - OAuth2:
          - user

components:
  schemas:
    User:
      allOf:
        - $ref: '#/components/schemas/ObjId'
        - $ref: '#/components/schemas/UserContent'
      xml:
        name: User
    UserContent:
      type: object
      properties:
        #username:
        #  type: string
        #firstName:
        #  type: string
        #lastName:
        #  type: string
        img:
          #$ref: "#/components/schemas/Image"
          type: integer
          format: int64
          nullable: true
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          writeOnly: true
        #inscription:
        #  type: string
        #  format: date
        isAdmin:
          type: boolean
      xml:
        name: UserData
